Modelling the slide game
------------------------

Sample gameplay for a 3 x 3 slide game
where d = down move r = right move u = up move and l = left move

1 2 3 4 5 6 7 8 e
1 2 3 4 5 e 7 8 6 d
1 2 e 4 5 3 7 8 6 d
1 e 2 4 5 3 7 8 6 r
e a 2 4 5 3 7 8 6 r
4 a 2 e 5 3 7 8 6 u
4 a 2 7 5 3 e 8 6 u
4 a 2 7 5 3 8 e 6 l
4 a 2 7 5 3 8 6 e l

Sample gameplay for a 4 x 4 slide game

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 e
1 2 3 4 5 6 7 8 9 10 11 e 13 14 15 12 d
1 2 3 4 5 6 7 e 9 10 11 8 13 14 15 12 d
1 2 3 e 5 6 7 4 9 10 11 8 13 14 15 12 d
1 2 e 3 5 6 7 4 9 10 11 8 13 14 15 12 r
1 e 2 3 5 6 7 4 9 10 11 8 13 14 15 12 r
e 1 2 3 5 6 7 4 9 10 11 8 13 14 15 12 r
5 1 2 3 e 6 7 4 9 10 11 8 13 14 15 12 u
5 1 2 3 9 6 7 4 e 10 11 8 13 14 15 12 u
5 1 2 3 9 6 7 4 13 10 11 8 e 14 15 12 u
5 1 2 3 9 6 7 4 13 10 11 8 14 e 15 12 l
5 1 2 3 9 6 7 4 13 10 11 8 14 15 e 12 l
5 1 2 3 9 6 7 4 13 10 11 8 14 15 12 e l

From the sample moves above we start to see a pattern

The player has 4 basic moves
Up, Down, Left Right

Definitions
Up - Pushing a tile up to where an empty space was
Down - Pushing a tile down to where an empty space was
Left - Pushing a tile left to where an empty space was
Right - Pushing a tile rigiht to where an empty space was

We shall tackle each independently

UP & DOWN
---------

When a player moves up or down the empty space at position i switches place with the element at i + (gameSize) or i - (gameSize)

i.e if the game size was a 3 x 3 the empty space at i would switch with the element at i - 3 or 1 + 3 depending on the actual move.

	Up
	--
	If its an up move the empty space will switch place with the element at i + gameSize

	Down
	----
	If its a down move the empty space will switch place with the element at i - gameSize

Left & Right
------------

The left and right moves are quite easy. If the player makes a left or right move the empty space at position i will switch places with the element at position i + 1 or i - 1. Regardless of the game size.

	Left
	----
	If its a left move the empty space will switch place with the element at i + 1

	Right
	-----
	If its a right move the empty space will switch place with the element at i - 1

Summary of move effects
-----------------------

Up - [ i + gameSize ]
Down - [ i - gameSize ]
Left - [ i + 1 ]
Right - [ i - 1]

Conditions for validity of Moves
--------------------------------

Any move is valid if after calculating the move effect and the result gives a value not greater or less than the bounding values of the array.

i.e if i + gameSize is not greater than the array
	if i - gameSize is not less than the array
	if i + 1 is not greater than the array
	if i - 1 is not less than the array


Final Algorithm
---------------

1. Initialize the starting array
2. Store the size of the game
3. Wait for move
4. 	If Valid Move
5. 		calculate new position
6. 		switch
7. 		continue at line 3
8. 	else
9. 		continue at line 3


How to relay the model to the view
----------------------------------

Goal - To provide smooth animation of the tile movements

The problem is how we will relay the model to the view while still keeping good design. 

So what am thinking is rather than having just an array of numbers I could have an array of objects now this objects would then have a top and left property which would initially be their corresponding top and left positions on the view

Then with any move instead actually switching the elements in the model I could then adjust the elements top and left propertties to one that when displayed would give the view of how the model should look.

Oh no wait. I still need to check if the solution was correct. So I would have to models then the regular model we described above and then a view model. 

Its the view model that will control all the changing of the display. While the regular model will be incharge of having an array of how the current position would look and comparing it with the correct position.

But then how will we update the display properties. First we need to initialize the display properties based on the size of each tile and the size of the game i.e 3 x 3, 4 x 4 e.t.c

Sample 3 x 3 game

[1] [2] [3]
[4] [5] [6]
[7] [8] [e]

e is for empty

1 - top(0) left(0)
2 - top(0) left(tileWidth)
3 - top(0) left(2 x tileWidth)
4 - top(tileHeight) left(0)
5 - top(tileHeight) left(tileWidth)
6 - top(tileHeight) left(2 x tileWidth)
7 - top(2 x tileHeight) left(0)
8 - top(2 x tileHeight) left(tileWidth)
e - top(2 x tileHeight) left(2 x tileWidth)

hmm. I can already see a pattern.

One way I could achieve this is by using two for loops. First I will genrate two arrays one for all the possible top value and another for all the possible left values

Like so
var topValues = [0, tileHeight, 2 x tileHeight];
var leftValues = [0, tileWidth, 2 x tileWidth];

and then having the forloops something like this 
var model = [1, 2, 3, 4, 5, 6, 7, 8, e];

for(var top = 0; top < gameSize; top++){
	for(var left = 0; left < gameSize; left++){
		var current = model[(top * gameSize) + left];
		current.top = topValues[top];
		current.left = topValues[left];
	}
}

if the top variale was 1 and the left variable was 1

we then proceed into the loop 
we get the current = model[(1 * 3) + 1] that is model[4];
which is five

Next we assign the top and left properties of 5
that would be 
5.top = topValues[1] which is tileHeight
5.left = topValues[1] which is tileWidth

as you can see the value values of 5 correspond with that of the table

But then how do we get the values array
We would need the size of the game, tileWidth and tileHeight

the function might look something like this

function getValues(gameSize, tileWidth, tileHeight){
	var values = {};
	var topValues = [];
	var leftValues = [];

	for(var i = 0; i < gameSize; i++){
		topValues.push(tileHeight * i);
		leftValues.push(tileWidth * i);
	}

	values.top = topValues;
	values.left = leftValues;

	return values;
} 

So everything is looking good. Now the coco. How do we alter the top and left values based on the move that the person makes

No way!!!!!. It can't be that easy
WE know the empty spaces switch place with an element. Can't we just switch the top and left values of them.

Since the empty space will go to the elements place and the element will go to where the empty space was. We could just switch the values.

Now the rendering
-----------------

So how are we going to use the view model to render the actual view.

I will first use the view model to create divs based on the data of each object. Since the view model wwont change relative order with respect to the actual view I can just use a for loop

var tiles = document.querySelectorAll(".tile");
for(var i = 0; i < tiles.length; i++){
	var currentTile = tiles[i];
	currentTile.style.top = viewModel[i].top;
	currentTile.style.left = viewModel[i].left;
}

with the use of some css animations we can then apply smooth transitions based on the values of the top and left.

Big Picture

We have a model for keeping track of the current position
We have a viewModel for keeping tracking of the current look

The viewModel updates the actual view
The model determines when the game is over. It can also be used to save a game state.

What we need
------------

1. A model (contains both the view model and the normal model)
2. A controller (links the actual view and the models together)
3. A view (Has helper functions that control the view)
4. An events object (Maps user events to different functions)

Now that I think of it. I might be able to megre the model with the view model to get just one model. It can look something like this

model = {
	elements: [];
}

the elements array will now contain objects of its own. They could be names tile

tile: {
	position: 0,
	name: 1,
	top: 0,
	left: 0
}

So the elements will contain as many tiles as needed.

Then when I make a up down left or right move instead of switching we can just change the position values and likewise switch the top and left value